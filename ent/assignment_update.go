// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/msal4/entgql/ent/assignment"
	"github.com/msal4/entgql/ent/predicate"
)

// AssignmentUpdate is the builder for updating Assignment entities.
type AssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *AssignmentMutation
}

// Where appends a list predicates to the AssignmentUpdate builder.
func (au *AssignmentUpdate) Where(ps ...predicate.Assignment) *AssignmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetIsExam sets the "is_exam" field.
func (au *AssignmentUpdate) SetIsExam(b bool) *AssignmentUpdate {
	au.mutation.SetIsExam(b)
	return au
}

// SetNillableIsExam sets the "is_exam" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableIsExam(b *bool) *AssignmentUpdate {
	if b != nil {
		au.SetIsExam(*b)
	}
	return au
}

// SetDueDate sets the "due_date" field.
func (au *AssignmentUpdate) SetDueDate(t time.Time) *AssignmentUpdate {
	au.mutation.SetDueDate(t)
	return au
}

// SetDuration sets the "duration" field.
func (au *AssignmentUpdate) SetDuration(t time.Duration) *AssignmentUpdate {
	au.mutation.ResetDuration()
	au.mutation.SetDuration(t)
	return au
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableDuration(t *time.Duration) *AssignmentUpdate {
	if t != nil {
		au.SetDuration(*t)
	}
	return au
}

// AddDuration adds t to the "duration" field.
func (au *AssignmentUpdate) AddDuration(t time.Duration) *AssignmentUpdate {
	au.mutation.AddDuration(t)
	return au
}

// ClearDuration clears the value of the "duration" field.
func (au *AssignmentUpdate) ClearDuration() *AssignmentUpdate {
	au.mutation.ClearDuration()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AssignmentUpdate) SetDeletedAt(t time.Time) *AssignmentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AssignmentUpdate) SetNillableDeletedAt(t *time.Time) *AssignmentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AssignmentUpdate) ClearDeletedAt() *AssignmentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// Mutation returns the AssignmentMutation object of the builder.
func (au *AssignmentUpdate) Mutation() *AssignmentMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssignmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssignmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssignmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assignment.Table,
			Columns: assignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: assignment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.IsExam(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: assignment.FieldIsExam,
		})
	}
	if value, ok := au.mutation.DueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDueDate,
		})
	}
	if value, ok := au.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := au.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if au.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assignment.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AssignmentUpdateOne is the builder for updating a single Assignment entity.
type AssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssignmentMutation
}

// SetIsExam sets the "is_exam" field.
func (auo *AssignmentUpdateOne) SetIsExam(b bool) *AssignmentUpdateOne {
	auo.mutation.SetIsExam(b)
	return auo
}

// SetNillableIsExam sets the "is_exam" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableIsExam(b *bool) *AssignmentUpdateOne {
	if b != nil {
		auo.SetIsExam(*b)
	}
	return auo
}

// SetDueDate sets the "due_date" field.
func (auo *AssignmentUpdateOne) SetDueDate(t time.Time) *AssignmentUpdateOne {
	auo.mutation.SetDueDate(t)
	return auo
}

// SetDuration sets the "duration" field.
func (auo *AssignmentUpdateOne) SetDuration(t time.Duration) *AssignmentUpdateOne {
	auo.mutation.ResetDuration()
	auo.mutation.SetDuration(t)
	return auo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableDuration(t *time.Duration) *AssignmentUpdateOne {
	if t != nil {
		auo.SetDuration(*t)
	}
	return auo
}

// AddDuration adds t to the "duration" field.
func (auo *AssignmentUpdateOne) AddDuration(t time.Duration) *AssignmentUpdateOne {
	auo.mutation.AddDuration(t)
	return auo
}

// ClearDuration clears the value of the "duration" field.
func (auo *AssignmentUpdateOne) ClearDuration() *AssignmentUpdateOne {
	auo.mutation.ClearDuration()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AssignmentUpdateOne) SetDeletedAt(t time.Time) *AssignmentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AssignmentUpdateOne) SetNillableDeletedAt(t *time.Time) *AssignmentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AssignmentUpdateOne) ClearDeletedAt() *AssignmentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// Mutation returns the AssignmentMutation object of the builder.
func (auo *AssignmentUpdateOne) Mutation() *AssignmentMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssignmentUpdateOne) Select(field string, fields ...string) *AssignmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Assignment entity.
func (auo *AssignmentUpdateOne) Save(ctx context.Context) (*Assignment, error) {
	var (
		err  error
		node *Assignment
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssignmentUpdateOne) SaveX(ctx context.Context) *Assignment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AssignmentUpdateOne) sqlSave(ctx context.Context) (_node *Assignment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assignment.Table,
			Columns: assignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: assignment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Assignment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assignment.FieldID)
		for _, f := range fields {
			if !assignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.IsExam(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: assignment.FieldIsExam,
		})
	}
	if value, ok := auo.mutation.DueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDueDate,
		})
	}
	if value, ok := auo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := auo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assignment.FieldDuration,
		})
	}
	if auo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assignment.FieldDuration,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assignment.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assignment.FieldDeletedAt,
		})
	}
	_node = &Assignment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
