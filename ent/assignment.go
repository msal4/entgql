// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/msal4/entgql/ent/assignment"
)

// Assignment is the model entity for the Assignment schema.
type Assignment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IsExam holds the value of the "is_exam" field.
	IsExam bool `json:"is_exam,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration time.Duration `json:"duration,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Assignment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case assignment.FieldIsExam:
			values[i] = new(sql.NullBool)
		case assignment.FieldDuration:
			values[i] = new(sql.NullInt64)
		case assignment.FieldDueDate, assignment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case assignment.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Assignment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Assignment fields.
func (a *Assignment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assignment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case assignment.FieldIsExam:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_exam", values[i])
			} else if value.Valid {
				a.IsExam = value.Bool
			}
		case assignment.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				a.DueDate = value.Time
			}
		case assignment.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				a.Duration = time.Duration(value.Int64)
			}
		case assignment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Assignment.
// Note that you need to call Assignment.Unwrap() before calling this method if this Assignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Assignment) Update() *AssignmentUpdateOne {
	return (&AssignmentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Assignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Assignment) Unwrap() *Assignment {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Assignment is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Assignment) String() string {
	var builder strings.Builder
	builder.WriteString("Assignment(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", is_exam=")
	builder.WriteString(fmt.Sprintf("%v", a.IsExam))
	builder.WriteString(", due_date=")
	builder.WriteString(a.DueDate.Format(time.ANSIC))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", a.Duration))
	if v := a.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Assignments is a parsable slice of Assignment.
type Assignments []*Assignment

func (a Assignments) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
