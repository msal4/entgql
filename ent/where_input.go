// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/msal4/entgql/ent/assignment"
	"github.com/msal4/entgql/ent/predicate"
)

// AssignmentWhereInput represents a where input for filtering Assignment queries.
type AssignmentWhereInput struct {
	Not *AssignmentWhereInput   `json:"not,omitempty"`
	Or  []*AssignmentWhereInput `json:"or,omitempty"`
	And []*AssignmentWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "is_exam" field predicates.
	IsExam    *bool `json:"isExam,omitempty"`
	IsExamNEQ *bool `json:"isExamNEQ,omitempty"`

	// "due_date" field predicates.
	DueDate      *time.Time  `json:"dueDate,omitempty"`
	DueDateNEQ   *time.Time  `json:"dueDateNEQ,omitempty"`
	DueDateIn    []time.Time `json:"dueDateIn,omitempty"`
	DueDateNotIn []time.Time `json:"dueDateNotIn,omitempty"`
	DueDateGT    *time.Time  `json:"dueDateGT,omitempty"`
	DueDateGTE   *time.Time  `json:"dueDateGTE,omitempty"`
	DueDateLT    *time.Time  `json:"dueDateLT,omitempty"`
	DueDateLTE   *time.Time  `json:"dueDateLTE,omitempty"`

	// "duration" field predicates.
	Duration       *time.Duration  `json:"duration,omitempty"`
	DurationNEQ    *time.Duration  `json:"durationNEQ,omitempty"`
	DurationIn     []time.Duration `json:"durationIn,omitempty"`
	DurationNotIn  []time.Duration `json:"durationNotIn,omitempty"`
	DurationGT     *time.Duration  `json:"durationGT,omitempty"`
	DurationGTE    *time.Duration  `json:"durationGTE,omitempty"`
	DurationLT     *time.Duration  `json:"durationLT,omitempty"`
	DurationLTE    *time.Duration  `json:"durationLTE,omitempty"`
	DurationIsNil  bool            `json:"durationIsNil,omitempty"`
	DurationNotNil bool            `json:"durationNotNil,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`
}

// Filter applies the AssignmentWhereInput filter on the AssignmentQuery builder.
func (i *AssignmentWhereInput) Filter(q *AssignmentQuery) (*AssignmentQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering assignments.
// An error is returned if the input is empty or invalid.
func (i *AssignmentWhereInput) P() (predicate.Assignment, error) {
	var predicates []predicate.Assignment
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, assignment.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Assignment, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, assignment.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Assignment, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, assignment.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, assignment.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, assignment.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, assignment.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, assignment.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, assignment.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, assignment.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, assignment.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, assignment.IDLTE(*i.IDLTE))
	}
	if i.IsExam != nil {
		predicates = append(predicates, assignment.IsExamEQ(*i.IsExam))
	}
	if i.IsExamNEQ != nil {
		predicates = append(predicates, assignment.IsExamNEQ(*i.IsExamNEQ))
	}
	if i.DueDate != nil {
		predicates = append(predicates, assignment.DueDateEQ(*i.DueDate))
	}
	if i.DueDateNEQ != nil {
		predicates = append(predicates, assignment.DueDateNEQ(*i.DueDateNEQ))
	}
	if len(i.DueDateIn) > 0 {
		predicates = append(predicates, assignment.DueDateIn(i.DueDateIn...))
	}
	if len(i.DueDateNotIn) > 0 {
		predicates = append(predicates, assignment.DueDateNotIn(i.DueDateNotIn...))
	}
	if i.DueDateGT != nil {
		predicates = append(predicates, assignment.DueDateGT(*i.DueDateGT))
	}
	if i.DueDateGTE != nil {
		predicates = append(predicates, assignment.DueDateGTE(*i.DueDateGTE))
	}
	if i.DueDateLT != nil {
		predicates = append(predicates, assignment.DueDateLT(*i.DueDateLT))
	}
	if i.DueDateLTE != nil {
		predicates = append(predicates, assignment.DueDateLTE(*i.DueDateLTE))
	}
	if i.Duration != nil {
		predicates = append(predicates, assignment.DurationEQ(*i.Duration))
	}
	if i.DurationNEQ != nil {
		predicates = append(predicates, assignment.DurationNEQ(*i.DurationNEQ))
	}
	if len(i.DurationIn) > 0 {
		predicates = append(predicates, assignment.DurationIn(i.DurationIn...))
	}
	if len(i.DurationNotIn) > 0 {
		predicates = append(predicates, assignment.DurationNotIn(i.DurationNotIn...))
	}
	if i.DurationGT != nil {
		predicates = append(predicates, assignment.DurationGT(*i.DurationGT))
	}
	if i.DurationGTE != nil {
		predicates = append(predicates, assignment.DurationGTE(*i.DurationGTE))
	}
	if i.DurationLT != nil {
		predicates = append(predicates, assignment.DurationLT(*i.DurationLT))
	}
	if i.DurationLTE != nil {
		predicates = append(predicates, assignment.DurationLTE(*i.DurationLTE))
	}
	if i.DurationIsNil {
		predicates = append(predicates, assignment.DurationIsNil())
	}
	if i.DurationNotNil {
		predicates = append(predicates, assignment.DurationNotNil())
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, assignment.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, assignment.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, assignment.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, assignment.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, assignment.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, assignment.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, assignment.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, assignment.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, assignment.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, assignment.DeletedAtNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/msal4/entgql/ent: empty predicate AssignmentWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return assignment.And(predicates...), nil
	}
}
